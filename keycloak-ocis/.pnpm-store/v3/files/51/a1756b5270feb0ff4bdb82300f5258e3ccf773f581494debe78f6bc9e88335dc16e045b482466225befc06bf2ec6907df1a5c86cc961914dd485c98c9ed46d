import _regeneratorRuntime from "@babel/runtime/regenerator";
import { setError } from '../common/actions';
import { resolve } from './resolver';
export function resolveError(error) {
  return function _callee(dispatch) {
    var resolver;
    return _regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            resolver = resolve(error.resolution);

            if (!resolver) {
              _context.next = 4;
              break;
            }

            _context.next = 4;
            return _regeneratorRuntime.awrap(dispatch(resolver(error)));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    });
  };
}
export function clearError(error) {
  var matchField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return function _callee2(dispatch, getState) {
    var currentError, action;
    return _regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            currentError = getState().common.error;

            if (currentError) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return");

          case 3:
            // Clear current error if resolving.
            action = currentError === error;

            if (action) {
              _context2.next = 13;
              break;
            }

            _context2.t0 = matchField;
            _context2.next = _context2.t0 === 'id' ? 8 : _context2.t0 === 'resolution' ? 10 : 12;
            break;

          case 8:
            action = currentError.id === error.id;
            return _context2.abrupt("break", 13);

          case 10:
            action = currentError.resolution === error.resolution;
            return _context2.abrupt("break", 13);

          case 12:
            return _context2.abrupt("break", 13);

          case 13:
            if (!action) {
              _context2.next = 16;
              break;
            }

            _context2.next = 16;
            return _regeneratorRuntime.awrap(dispatch(setError(null)));

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
}