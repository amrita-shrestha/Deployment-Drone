import _regeneratorRuntime from "@babel/runtime/regenerator";
import { registerResolver } from '../errors/resolver';
import { KPOP_RESET_USER, KPOP_RESET_USER_AND_REDIRECT_TO_SIGNIN } from './constants';
import { getOrCreateUserManager, startSignin } from './actions';

function resetUser() {
  return function _callee(dispatch) {
    var userManager;
    return _regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regeneratorRuntime.awrap(dispatch(getOrCreateUserManager()));

          case 2:
            userManager = _context.sent;
            _context.next = 5;
            return _regeneratorRuntime.awrap(userManager.removeUser());

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  };
}

function resetUserAndRedirectToSignin(error) {
  var prompt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'select_account';
  return function _callee2(dispatch) {
    return _regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regeneratorRuntime.awrap(dispatch(resetUser(error)));

          case 2:
            _context2.next = 4;
            return _regeneratorRuntime.awrap(dispatch(startSignin({
              prompt: prompt
            })));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
}

var register = function register() {
  registerResolver(KPOP_RESET_USER, resetUser);
  registerResolver(KPOP_RESET_USER_AND_REDIRECT_TO_SIGNIN, resetUserAndRedirectToSignin);
};

export default register;