import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { addLocaleData } from 'react-intl'; // Always import english first.

import en from 'react-intl/locale-data/en'; // Please keep imports alphabetically sorted. These imports also need to be
// kept in sync with the translations in i18n/locales.

import de from 'react-intl/locale-data/de';
import fr from 'react-intl/locale-data/fr';
import hi from 'react-intl/locale-data/hi';
import is from 'react-intl/locale-data/is';
import nb from 'react-intl/locale-data/nb';
import nl from 'react-intl/locale-data/nl';
import pt from 'react-intl/locale-data/pt';
import ru from 'react-intl/locale-data/ru';
var initializedIntl = false;
export var initializeIntl = function initializeIntl() {
  return _regeneratorRuntime.async(function initializeIntl$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!initializedIntl) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return");

        case 2:
          // NOTE(longsleep): Add all locales which we want to support here.
          addLocaleData([].concat(_toConsumableArray(en), _toConsumableArray(de), _toConsumableArray(fr), _toConsumableArray(hi), _toConsumableArray(is), _toConsumableArray(nb), _toConsumableArray(nl), _toConsumableArray(pt), _toConsumableArray(ru)));
          initializedIntl = true;

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
};
export default initializeIntl;