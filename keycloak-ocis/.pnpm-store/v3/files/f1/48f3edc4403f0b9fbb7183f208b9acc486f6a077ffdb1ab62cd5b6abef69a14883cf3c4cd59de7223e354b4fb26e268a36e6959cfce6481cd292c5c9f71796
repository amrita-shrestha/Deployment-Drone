import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { withStyles } from '@material-ui/core/styles';
import Hidden from '@material-ui/core/Hidden';
import AppsGrid from '../AppsGrid';
import { withMain } from '../MainContainer/MainContext';
import { withBase } from '../BaseContainer/BaseContext';
import { embeddedShape } from '../shapes';

var styles = function styles(theme) {
  return {
    root: {
      width: 48,
      paddingTop: theme.spacing.unit * 2,
      paddingBottom: theme.spacing.unit * 2,
      boxSizing: 'border-box',
      borderLeft: "1px solid ".concat(theme.palette.divider)
    },
    apps: {
      gridTemplateColumns: '48px'
    }
  };
};

var AsideBar =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(AsideBar, _React$PureComponent);

  function AsideBar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AsideBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AsideBar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleAppClick", function (event, app, href) {
      var aside = _this.props.aside;
      event.preventDefault();
      aside.load(app, href);
    });

    return _this;
  }

  _createClass(AsideBar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          classes = _this$props.classes,
          classNameProp = _this$props.className,
          embedded = _this$props.embedded,
          config = _this$props.config,
          aside = _this$props.aside,
          other = _objectWithoutProperties(_this$props, ["children", "classes", "className", "embedded", "config", "aside"]);

      var apps = config && config.apps && config.apps.aside ? config.apps.aside : [];

      if (apps.length === 0 || embedded && embedded.enabled) {
        // Render nothing, when no aside apps configured or running embedded.
        return null;
      }

      return React.createElement(Hidden, {
        mdDown: true
      }, React.createElement("div", _extends({
        className: classNames(classes.root, classNameProp)
      }, other), React.createElement(AppsGrid, {
        apps: apps,
        enabledApps: [],
        className: classes.apps,
        size: "small",
        onAppClick: this.handleAppClick
      }), children));
    }
  }]);

  return AsideBar;
}(React.PureComponent);

AsideBar.propTypes = undefined !== "production" ? {
  /**
     * The content of the component.
     */
  children: PropTypes.node,

  /**
   * Useful to extend the style applied to components.
   */
  classes: PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The app configuration object. This value is made available by the
   * integrated BaseContext.
   */
  config: PropTypes.object,

  /**
   * The app embedded object. This value is made available by the
   * integrated BaseContext.
   */
  embedded: embeddedShape,

  /**
   * Aside helper, comes from the withMain wrapper.
   */
  aside: PropTypes.object.isRequired
} : {};
export default withStyles(styles, {
  name: 'KpopAsideBar'
})(withBase(withMain(AsideBar)));