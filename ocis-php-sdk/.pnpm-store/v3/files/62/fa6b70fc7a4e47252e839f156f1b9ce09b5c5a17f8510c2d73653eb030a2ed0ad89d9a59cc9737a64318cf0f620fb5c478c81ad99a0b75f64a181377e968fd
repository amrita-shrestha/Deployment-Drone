import _regeneratorRuntime from "@babel/runtime/regenerator";
// In production, we register a service worker to serve assets from local cache.
// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities.

/*eslint-disable no-console*/
import { registerBeforeinstallPrompt } from '../pwa';
import { newContent, readyForOfflineUse, registrationError, registrationSuccess, isOfflineMode } from './actions';
var isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.
window.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.
window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)); // The following options need to be provided to successfully register the
// service worker. Useful values come from process.env.NODE_ENV and process.env
// process.env.PUBLIC_URL.

var defaultOptions = {
  env: undefined,
  publicUrl: undefined
};
export default function register(store) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  return new Promise(function (resolve) {
    if (options.env === undefined || options.publicUrl === undefined) {
      throw new Error('invalid service worker invocation, missing env and publicUrl options');
    }

    if (!options.noInstallPrompt) {
      registerBeforeinstallPrompt(store);
    }

    if ('serviceWorker' in navigator) {
      // The URL constructor is available in all browsers that support SW.
      var publicUrl = new URL(options.publicUrl, window.location);

      if (publicUrl.origin !== window.location.origin) {
        // Our service worker won't work if PUBLIC_URL is on a different origin
        // from what our page is served on.
        console.warn('This web app has a service worker, but it is disabled as the origin is different.');
        resolve(null);
        return;
      }

      window.addEventListener('load', function () {
        var swUrl = "".concat(options.publicUrl, "/service-worker.js");

        if (isLocalhost) {
          // This is running on localhost. Lets check if a service worker still exists or not.
          resolve(checkValidServiceWorker(swUrl, store)); // Add some additional logging to localhost,

          navigator.serviceWorker.ready.then(function () {
            console.info('This web app is being served cache-first by a service worker.');
          });
        } else {
          // Is not local host. Just register service worker
          resolve(registerValidSW(swUrl, store));
        }
      });
    }
  });
}

function registerValidSW(swUrl, store) {
  return navigator.serviceWorker.register(swUrl).then(function _callee(registration) {
    return _regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            registration.onupdatefound = function () {
              var installingWorker = registration.installing;

              if (installingWorker === null) {
                return;
              }

              installingWorker.onstatechange = function () {
                if (installingWorker.state === 'installed') {
                  if (navigator.serviceWorker.controller) {
                    // At this point, the updated precached content has been fetched,
                    // but the previous service worker will still serve the older
                    // content until all client tabs are closed or after it has
                    // triggered skipWaiting.
                    installingWorker.postMessage({
                      type: 'SKIP_WAITING'
                    });
                    console.debug('New content is available; please refresh.');
                    store.dispatch(newContent());
                  } else {
                    // At this point, everything has been precached.
                    // It's the perfect time to display a
                    // "Content is cached for offline use." message.
                    console.debug('Content is cached for offline use.');
                    store.dispatch(readyForOfflineUse());
                  }
                }
              };
            };

            _context.next = 3;
            return _regeneratorRuntime.awrap(store.dispatch(registrationSuccess(registration)));

          case 3:
            return _context.abrupt("return", registration);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    });
  })["catch"](function (error) {
    console.error('Error during service worker registration:', error);
    store.dispatch(registrationError(error));
  });
}

function checkValidServiceWorker(swUrl, store) {
  // Check if the service worker can be found. If it can't reload the page.
  return fetch(swUrl).then(function (response) {
    // Ensure service worker exists, and that we really are getting a JS file.
    var contentType = response.headers.get('content-type');

    if (response.status === 404 || contentType !== null && contentType.indexOf('javascript') === -1) {
      // No service worker found. Probably a different app. Reload the page.
      navigator.serviceWorker.ready.then(function (registration) {
        registration.unregister().then(function () {
          window.location.reload();
        });
      });
    } else {
      // Service worker found. Proceed as normal.
      return registerValidSW(swUrl, store);
    }
  })["catch"](function () {
    console.debug('No internet connection found. App is running in offline mode.');
    store.dispatch(isOfflineMode());
  });
}

export function unregister() {
  return _regeneratorRuntime.async(function unregister$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!('serviceWorker' in navigator)) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return", navigator.serviceWorker.ready.then(function (registration) {
            registration.unregister();
          }));

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
}