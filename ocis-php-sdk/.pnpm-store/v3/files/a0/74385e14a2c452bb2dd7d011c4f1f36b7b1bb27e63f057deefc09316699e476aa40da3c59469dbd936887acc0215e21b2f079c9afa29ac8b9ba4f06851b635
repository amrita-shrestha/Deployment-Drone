import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { withStyles } from '@material-ui/core/styles';
import Fab from '@material-ui/core/Fab';
import ButtonBase from '@material-ui/core/ButtonBase';
import Typography from '@material-ui/core/Typography';
import { fade } from '@material-ui/core/styles/colorManipulator';

var styles = function styles(theme) {
  return {
    root: _objectSpread({
      lineHeight: 1.75
    }, theme.typography.button, {
      boxSizing: 'border-box',
      minWidth: 64,
      padding: '6px 16px',
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.text.primary,
      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
        duration: theme.transitions.duration["short"]
      }),
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        },
        '&$disabled': {
          backgroundColor: 'transparent'
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    }),
    fab: {
      boxShadow: theme.shadows[4]
    },
    label: {
      marginLeft: theme.spacing.unit * 1.5,
      fontWeight: 400
    },

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {}
  };
};

var MasterButton =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(MasterButton, _React$PureComponent);

  function MasterButton() {
    _classCallCheck(this, MasterButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(MasterButton).apply(this, arguments));
  }

  _createClass(MasterButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          classes = _this$props.classes,
          classNameProp = _this$props.className,
          children = _this$props.children,
          color = _this$props.color,
          icon = _this$props.icon,
          disabled = _this$props.disabled,
          other = _objectWithoutProperties(_this$props, ["classes", "className", "children", "color", "icon", "disabled"]);

      var className = classNames(classes.root, classNameProp);
      return React.createElement(ButtonBase, _extends({
        className: className,
        disabled: disabled
      }, other), React.createElement(Fab, {
        size: "small",
        color: color,
        component: "div",
        disabled: disabled,
        className: classes.fab
      }, icon), React.createElement(Typography, {
        variant: "button",
        color: "inherit",
        className: classes.label
      }, children));
    }
  }]);

  return MasterButton;
}(React.PureComponent);

MasterButton.defaultProps = {
  color: 'primary'
};
MasterButton.propTypes = undefined !== "production" ? {
  /**
   * The content of the component.
   */
  children: PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),

  /**
   * The icon for the button.
   */
  icon: PropTypes.node.isRequired,

  /**
   * If `true`, the button will be disabled.
   */
  disabled: PropTypes.bool
} : {};
export default withStyles(styles, {
  name: 'KpopMasterButton'
})(MasterButton);