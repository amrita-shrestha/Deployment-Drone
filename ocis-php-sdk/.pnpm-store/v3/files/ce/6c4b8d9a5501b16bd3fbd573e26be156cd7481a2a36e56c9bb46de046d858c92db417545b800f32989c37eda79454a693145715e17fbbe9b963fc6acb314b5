import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import AppsIcon from '@material-ui/icons/Apps';
import Popover from '@material-ui/core/Popover';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import AppsGrid from './AppsGrid';
import { withBase } from '../BaseContainer/BaseContext';
import { embeddedShape } from '../shapes';

var styles = function styles(theme) {
  return {
    card: {
      paddingTop: theme.spacing.unit
    }
  };
};

var _ref =
/*#__PURE__*/
React.createElement(AppsIcon, null);

var AppsSwitcherButton =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(AppsSwitcherButton, _React$PureComponent);

  function AppsSwitcherButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AppsSwitcherButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppsSwitcherButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      anchorEl: null
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      _this.setState({
        anchorEl: event.currentTarget
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        anchorEl: null
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleAppClick", function (event, app) {
      var onAppClick = _this.props.onAppClick;

      if (onAppClick) {
        onAppClick(event, app);
      }

      if (!event.defaultPrevented) {
        setTimeout(_this.handleClose, 0);
      }
    });

    return _this;
  }

  _createClass(AppsSwitcherButton, [{
    key: "render",
    value: function render() {
      var anchorEl = this.state.anchorEl;

      var _this$props = this.props,
          classes = _this$props.classes,
          AppsGridProps = _this$props.AppsGridProps,
          config = _this$props.config,
          embedded = _this$props.embedded,
          other = _objectWithoutProperties(_this$props, ["classes", "AppsGridProps", "config", "embedded"]);

      if (embedded && embedded.enabled) {
        // Render nothing if embedded.
        return null;
      }

      if (config && config.apps && config.apps.enabled && config.apps.enabled.length === 0) {
        // Render nothing if no apps are enabled.
        return null;
      }

      var menuID = 'kpop-apps-switcher-menu';

      var appsGridProps = _objectSpread({
        onAppClick: this.handleAppClick
      }, AppsGridProps);

      return React.createElement(React.Fragment, null, React.createElement(IconButton, _extends({
        "aria-owns": anchorEl ? menuID : null,
        "aria-haspopup": "true",
        onClick: this.handleClick
      }, other), _ref), React.createElement(Popover, {
        id: menuID,
        anchorEl: anchorEl,
        open: Boolean(anchorEl),
        onClose: this.handleClose,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'center'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }, React.createElement(Card, {
        className: classes.card
      }, React.createElement(CardContent, null, React.createElement(AppsGrid, appsGridProps)))));
    }
  }]);

  return AppsSwitcherButton;
}(React.PureComponent);

AppsSwitcherButton.propTypes = undefined !== "production" ? {
  /**
   * Useful to extend the style applied to components.
   */
  classes: PropTypes.object.isRequired,

  /**
   * Properties applied to the `AppsGrid` element.
   */
  AppsGridProps: PropTypes.object,

  /**
   * Callback fired when the an app is clicked.
   */
  onAppClick: PropTypes.func,

  /**
   * The app configuration object. This value is made available by the
   * integrated BaseContext.
   */
  config: PropTypes.object,

  /**
   * The app embedded object. This value is made available by the
   * integrated BaseContext.
   */
  embedded: embeddedShape
} : {};
export default withBase(withStyles(styles, {
  name: 'KpopAppsSwitcherButton'
})(AppsSwitcherButton));