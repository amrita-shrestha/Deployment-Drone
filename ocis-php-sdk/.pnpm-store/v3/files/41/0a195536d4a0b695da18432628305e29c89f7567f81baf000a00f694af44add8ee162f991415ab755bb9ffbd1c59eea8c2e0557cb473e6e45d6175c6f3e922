import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { userShape } from '../shapes';
import { getDisplayName } from './utils';
export var DisplayName =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DisplayName, _React$Component);

  function DisplayName() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DisplayName);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DisplayName)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {});

    return _this;
  }

  _createClass(DisplayName, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var displayName = this.state.displayName;

      if (nextState.displayName !== displayName) {
        return true;
      }

      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          user = _this$props.user,
          other = _objectWithoutProperties(_this$props, ["user"]);

      var displayName = this.state.displayName;
      return React.createElement("span", other, displayName);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var user = nextProps.user;

      if (prevState.user && user.displayName === prevState.user.displayName && user.givenName === prevState.user.givenName && user.surname === prevState.user.surname) {
        return null;
      }

      return {
        user: user,
        displayName: getDisplayName(user)
      };
    }
  }]);

  return DisplayName;
}(React.Component);
DisplayName.propTypes = undefined !== "production" ? {
  /**
   * The user object. Will be used to consistently select the color and label.
   */
  user: userShape.isRequired
} : {};
export default DisplayName;