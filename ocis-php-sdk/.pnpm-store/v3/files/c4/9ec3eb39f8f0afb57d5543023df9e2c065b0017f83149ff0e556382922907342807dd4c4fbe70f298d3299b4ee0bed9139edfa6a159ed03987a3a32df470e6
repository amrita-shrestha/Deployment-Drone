export function qualifyURL(url) {
  var a = document.createElement('a');
  a.href = url;
  return a.href;
}
export function showErrorInLoader() {
  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Unknown error';
  var err = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var loader = document.getElementById('loader');

  if (!loader) {
    loader = document.createElement("div");
    loader.id = 'loader';
    document.body.appendChild(loader);
  } else {
    loader.innerHTML = '';
  }

  loader.appendChild(document.createTextNode(msg));

  if (err) {
    loader.appendChild(document.createTextNode(' ' + err));
  }
}
export function parseParams(s) {
  if (!s) {
    return {};
  }

  var pieces = s.split('&');
  var data = {};
  var parts;

  for (var i = 0; i < pieces.length; i++) {
    parts = pieces[i].split('=');

    if (parts.length < 2) {
      parts.push('');
    }

    data[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return data;
}
export function encodeParams(data) {
  var ret = [];

  for (var d in data) {
    ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));
  }

  return ret.join('&');
}
export function parseQuery(s) {
  if (!s) {
    return {};
  }

  var pieces = s.split('&');
  var data = {};
  var parts;

  for (var i = 0; i < pieces.length; i++) {
    parts = pieces[i].split('=');

    if (parts.length < 2) {
      parts.push('');
    }

    data[decodeURI(parts[0])] = decodeURI(parts[1]);
  }

  return data;
}
export function encodeQuery(data) {
  var ret = [];

  for (var d in data) {
    ret.push(encodeURI(d) + '=' + encodeURI(data[d]));
  }

  return ret.join('&');
}
export function forceBase64URLEncoded(s) {
  // Converts Base64 Standard encoded string to Base64 URL encoded string. See
  // https://tools.ietf.org/html/rfc4648#section-5 for the specification.
  return s.replace(/\+/g, '-').replace(/\//, '_');
}
export function forceBase64StdEncoded(s) {
  // Converts Base64 URL encoded string to Base64 Standard encoded string. See
  // https://tools.ietf.org/html/rfc4648#section-5 for the specification.
  return s.replace(/-/g, '+').replace(/_/, '/');
}
export var isMobileSafari = function isMobileSafari() {
  var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
  return /iP(ad|od|hone)/i.test(userAgent) && /WebKit/i.test(userAgent);
};
export var isAndroid = function isAndroid() {
  var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
  return /Android/i.test(userAgent);
};
export var isMobile = function isMobile() {
  var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
  return /Mobi/.test(userAgent);
};
export function isInStandaloneMode() {
  // Checks if running as progressive web app in standalone mode.
  var standalone = // See https://w3c.github.io/manifest/#the-display-mode-media-feature.
  window.matchMedia('(display-mode: standalone)').matches // Standard compliant.
  || window.navigator.standalone // Safari meh :/
  ;
  return standalone;
}
export function isInFrame() {
  // Check if running inside a frame.
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
}