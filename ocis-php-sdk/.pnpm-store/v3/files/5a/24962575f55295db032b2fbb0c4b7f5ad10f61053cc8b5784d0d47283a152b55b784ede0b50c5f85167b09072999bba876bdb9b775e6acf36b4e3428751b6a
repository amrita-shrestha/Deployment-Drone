import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import PropTypes from 'prop-types';
export var errorPropTypes = {
  /**
   * The id of the error. Can be used to trigger special action for individual
   * errors. If empty it is a standard fatal error without special handling.
   */
  id: PropTypes.string,

  /**
   * The error message. This is either a plain string, or an object which
   * can be used as react-intl MessageDescriptor.
   */
  message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Detailed error message.  This is either a plain string, or an object which
   * can be used as react-intl MessageDescriptor.
   */
  detail: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Values mapping for string placeholders to primitive text values.
   */
  values: PropTypes.object,

  /**
   * Flag indicating that the error is fatal and that the app cannot continue.
   */
  fatal: PropTypes.bool,

  /**
   * Flag preventing the error message to automatically be extended by a message
   * that the error is fatal.
   */
  withoutFatalSuffix: PropTypes["boolean"],

  /**
   * Text label to be show on the button when an error dialog is shown.
   */
  reloadButtonText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Action ID for a potentially registered error resultion for this error.
   */
  resolution: PropTypes.string,

  /**
   * Additional options attached for this error.
   */
  options: PropTypes.object
};
var errorShape = PropTypes.shape(_objectSpread({}, errorPropTypes));
export default errorShape;