import _regeneratorRuntime from "@babel/runtime/regenerator";
import { KPOP_VISIBILITY_CHANGE } from './constants';
import { getVisibilityManager, newVisibilityManager } from './visibilitymanager';
export function initialize() {
  var glue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return function _callee(dispatch) {
    var mgr;
    return _regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regeneratorRuntime.awrap(dispatch(getOrCreateVisibilityManager(glue)));

          case 2:
            mgr = _context.sent;
            return _context.abrupt("return", mgr.initiallyHidden);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    });
  };
}
export function getOrCreateVisibilityManager() {
  var glue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return function _callee2(dispatch) {
    var visibilityManager;
    return _regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            visibilityManager = getVisibilityManager();

            if (!visibilityManager) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", visibilityManager);

          case 3:
            return _context2.abrupt("return", dispatch(createVisbilityManager(glue)));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
}
export function createVisbilityManager() {
  var glue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return function _callee4(dispatch) {
    var mgr;
    return _regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            mgr = newVisibilityManager(function _callee3(_ref) {
              var hidden, visibilityState;
              return _regeneratorRuntime.async(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      hidden = _ref.hidden, visibilityState = _ref.visibilityState;
                      return _context3.abrupt("return", dispatch(visbilityChange(hidden, visibilityState)));

                    case 2:
                    case "end":
                      return _context3.stop();
                  }
                }
              });
            }, glue);
            _context4.next = 3;
            return _regeneratorRuntime.awrap(dispatch(visbilityChange(mgr.initiallyHidden, mgr.initialVisibilityState)));

          case 3:
            return _context4.abrupt("return", mgr);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    });
  };
}
export function visbilityChange(hidden, visibilityState) {
  return {
    type: KPOP_VISIBILITY_CHANGE,
    hidden: hidden,
    visibilityState: visibilityState
  };
}