import _regeneratorRuntime from "@babel/runtime/regenerator";
import { KPOP_OFFLINE_ONLINE, KPOP_OFFLINE_OFFLINE } from './constants';
import { getOfflineManager, newOfflineManager } from './offlinemanager';
export function initialize() {
  return function _callee(dispatch) {
    var mgr;
    return _regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regeneratorRuntime.awrap(dispatch(getOrCreateOfflineManager()));

          case 2:
            mgr = _context.sent;
            return _context.abrupt("return", mgr.online);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    });
  };
}
export function getOrCreateOfflineManager() {
  return function _callee2(dispatch) {
    var offlineManager;
    return _regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            offlineManager = getOfflineManager();

            if (!offlineManager) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", offlineManager);

          case 3:
            return _context2.abrupt("return", dispatch(createOfflineManager()));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
}
export function createOfflineManager() {
  return function _callee5(dispatch) {
    var mgr;
    return _regeneratorRuntime.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            mgr = newOfflineManager(function _callee3(mgr) {
              return _regeneratorRuntime.async(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      return _context3.abrupt("return", dispatch(nowOffline(mgr)));

                    case 1:
                    case "end":
                      return _context3.stop();
                  }
                }
              });
            }, function _callee4(mgr) {
              return _regeneratorRuntime.async(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      return _context4.abrupt("return", dispatch(nowOnline(mgr)));

                    case 1:
                    case "end":
                      return _context4.stop();
                  }
                }
              });
            });
            _context5.next = 3;
            return _regeneratorRuntime.awrap(dispatch(mgr.online ? nowOnline(mgr) : nowOffline(mgr)));

          case 3:
            return _context5.abrupt("return", mgr);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    });
  };
}
export function nowOnline(mgr) {
  var wasInitiallyOnline = mgr.wasInitiallyOnline,
      wasOnlineBefore = mgr.wasOnlineBefore,
      wasOnlineOnce = mgr.wasOnlineOnce,
      wasOfflineOnce = mgr.wasOfflineOnce;
  return {
    type: KPOP_OFFLINE_ONLINE,
    offline: false,
    wasInitiallyOnline: wasInitiallyOnline,
    wasOnlineBefore: wasOnlineBefore,
    wasOnlineOnce: wasOnlineOnce,
    wasOfflineOnce: wasOfflineOnce
  };
}
export function nowOffline(mgr) {
  var wasInitiallyOnline = mgr.wasInitiallyOnline,
      wasOnlineBefore = mgr.wasOnlineBefore,
      wasOnlineOnce = mgr.wasOnlineOnce,
      wasOfflineOnce = mgr.wasOfflineOnce;
  return {
    type: KPOP_OFFLINE_OFFLINE,
    offline: true,
    wasInitiallyOnline: wasInitiallyOnline,
    wasOnlineBefore: wasOnlineBefore,
    wasOnlineOnce: wasOnlineOnce,
    wasOfflineOnce: wasOfflineOnce
  };
}